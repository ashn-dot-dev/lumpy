println("[123, 456, 789].slice(0, 0) is " + repr([123, 456, 789].slice(0, 0)));
println("[123, 456, 789].slice(0, 3) is " + repr([123, 456, 789].slice(0, 3)));
println("[123, 456, 789].slice(0, 1) is " + repr([123, 456, 789].slice(0, 1)));
println("[123, 456, 789].slice(1, 3) is " + repr([123, 456, 789].slice(1, 3)));
try { [123, 456, 789].slice(0.5, 1); } else err { println("[123, 456, 789].slice(0.5, 1) produces the error " + repr(err)); }
try { [123, 456, 789].slice(0, 1.5); } else err { println("[123, 456, 789].slice(0, 1.5) produces the error " + repr(err)); }
try { [123, 456, 789].slice(-1, 3); } else err { println("[123, 456, 789].slice(-1, 3) produces the error " + repr(err)); }
try { [123, 456, 789].slice(0, -1); } else err { println("[123, 456, 789].slice(0, -1) produces the error " + repr(err)); }
try { [123, 456, 789].slice(3, 1); } else err { println("[123, 456, 789].slice(3, 1) produces the error " + repr(err)); }
################################################################################
# [123, 456, 789].slice(0, 0) is []
# [123, 456, 789].slice(0, 3) is [123, 456, 789]
# [123, 456, 789].slice(0, 1) is [123]
# [123, 456, 789].slice(1, 3) is [456, 789]
# [123, 456, 789].slice(0.5, 1) produces the error "expected integer index, received 0.5"
# [123, 456, 789].slice(0, 1.5) produces the error "expected integer index, received 1.5"
# [123, 456, 789].slice(-1, 3) produces the error "slice begin is less than zero"
# [123, 456, 789].slice(0, -1) produces the error "slice end is less than zero"
# [123, 456, 789].slice(3, 1) produces the error "slice end is less than slice begin"
