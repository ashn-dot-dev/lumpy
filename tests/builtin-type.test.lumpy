println("type(null) is " + repr(type(null)));
println("type(true) is " + repr(type(true)));
println("type(123) is " + repr(type(123)));
println("type(\"foo\") is " + repr(type("foo")));
println("type([123, 456]) is " + repr(type([123, 456])));
println("type({\"foo\": \"bar\"}) is " + repr(type({"foo": "bar"})));
println("type({\"foo\", \"bar\"}) is " + repr(type({"foo", "bar"})));
println("type(123.&) is " + repr(type(123.&)));
println("type(function() {}) is " + repr(type(function() {})));
println("type(println) is " + repr(type(println)));
let meta = {"type": "foo"};
let custom = {"custom": "type"};
setmeta(custom.&, meta);
println("type(custom) is " + repr(type(custom)));
################################################################################
# type(null) is "null"
# type(true) is "boolean"
# type(123) is "number"
# type("foo") is "string"
# type([123, 456]) is "vector"
# type({"foo": "bar"}) is "map"
# type({"foo", "bar"}) is "set"
# type(123.&) is "reference"
# type(function() {}) is "function"
# type(println) is "function"
# type(custom) is "foo"
