try { dumpln( null.foo                        ); } else err { dumpln(err); }
try { dumpln( true.foo                        ); } else err { dumpln(err); }
try { dumpln( 123.foo                         ); } else err { dumpln(err); }
try { dumpln( "foo".foo                       ); } else err { dumpln(err); }
try { dumpln( ["foo", "bar"].foo              ); } else err { dumpln(err); }
try { dumpln( map{"foo": 123, "bar": 456}.foo ); } else err { dumpln(err); }
try { dumpln( set{"foo", "bar"}.foo           ); } else err { dumpln(err); }
try { dumpln( 123.&.foo                       ); } else err { dumpln(err); }
try { dumpln( function(){}.foo                ); } else err { dumpln(err); }
try { dumpln( println.foo                     ); } else err { dumpln(err); }

print("\n");

let meta = {"f": function(self) { println("inside metafunction f"); }};
let x = 123;
setmeta(x.&, meta);
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }
try { x.f = 456; } else err { dumpln(err); }
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }

print("\n");

let meta = {"f": function(self) { println("inside metafunction f"); }};
let x = map{};
setmeta(x.&, meta);
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }
x.f = 456;
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }

print("\n");

let meta = {"f": function(self) { println("inside metafunction f"); }};
let x = map{"f": 123};
setmeta(x.&, meta);
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }
x.f = 456;
try { dumpln(x.f); } else err { dumpln(err); }
try { x.f(); } else err { dumpln(err); }

print("\n");

let meta = {"f": function(self) { self.*.value = "bar"; }};
let x = map{"value": "foo"};
setmeta(x.&, meta);
dumpln(x);
x.f();
dumpln(x);
################################################################################
# "invalid null access with field \"foo\""
# "invalid boolean access with field \"foo\""
# "invalid number access with field \"foo\""
# "invalid string access with field \"foo\""
# "invalid vector access with field \"foo\""
# 123
# "invalid set access with field \"foo\""
# "invalid reference access with field \"foo\""
# "invalid function access with field \"foo\""
# "invalid function access with field \"foo\""
#
# meta::f@[operator-postfix-access-dot.test.lumpy, line 14]
# inside metafunction f
# "attempted access into type `number` with type `string`"
# meta::f@[operator-postfix-access-dot.test.lumpy, line 14]
# inside metafunction f
#
# meta::f@[operator-postfix-access-dot.test.lumpy, line 25]
# inside metafunction f
# 456
# "attempted to call non-function type `number`"
#
# 123
# "attempted to call non-function type `number`"
# 456
# "attempted to call non-function type `number`"
#
# {"value": "foo"}
# {"value": "bar"}
