let x = 123;
let y = 456;
let f = function() { println("f"); };
let g = function() { println("g"); };
try { dumpln( null            == null            ); } else err { dumpln(err); }
try { dumpln( true            == true            ); } else err { dumpln(err); }
try { dumpln( true            == false           ); } else err { dumpln(err); }
try { dumpln( 123             == 123             ); } else err { dumpln(err); }
try { dumpln( 123             == 456             ); } else err { dumpln(err); }
try { dumpln( "foo"           == "foo"           ); } else err { dumpln(err); }
try { dumpln( "foo"           == "bar"           ); } else err { dumpln(err); }
try { dumpln( [123]           == [123]           ); } else err { dumpln(err); }
try { dumpln( [123]           == [456]           ); } else err { dumpln(err); }
try { dumpln( map{"abc": 123} == map{"abc": 123} ); } else err { dumpln(err); }
try { dumpln( map{"abc": 123} == map{"abc": 456} ); } else err { dumpln(err); }
try { dumpln( set{"abc"}      == set{"abc"}      ); } else err { dumpln(err); }
try { dumpln( set{"abc"}      == set{"xyz"}      ); } else err { dumpln(err); }
try { dumpln( x.&             == x.&             ); } else err { dumpln(err); }
try { dumpln( x.&             == y.&             ); } else err { dumpln(err); }
try { dumpln( f               == f               ); } else err { dumpln(err); }
try { dumpln( f               == g               ); } else err { dumpln(err); }
try { dumpln( println         == println         ); } else err { dumpln(err); }
try { dumpln( println         == dumpln          ); } else err { dumpln(err); }

print("\n");

let meta = {"==": function(lhs, rhs) { println("overload =="); return true; }};
let x = "foo";
let y = map{};
setmeta(x.&, meta);
try { x == y; } else err { dumpln(err); }
try { y == x; } else err { dumpln(err); }

print("\n");

let meta = {"==": function(lhs, rhs) { return "nope"; }};
let x = null;
setmeta(x.&, meta);
try { x == x; } else err { dumpln(err); }

print("\n");

let meta = {"<=>": function(lhs, rhs) { println("overload <=>"); return 0; }};
let x = "foo";
let y = map{};
setmeta(x.&, meta);
try { x == y; } else err { dumpln(err); }
try { y == x; } else err { dumpln(err); }
################################################################################
# true
# true
# false
# true
# false
# true
# false
# true
# false
# true
# false
# true
# false
# true
# false
# true
# false
# true
# false
#
# overload ==
# overload ==
#
# "metafunction `==` returned non-boolean value \"nope\""
#
# overload <=>
# overload <=>
