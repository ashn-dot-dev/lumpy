try { dumpln( null[0]                            ); } else err { dumpln(err); }
try { dumpln( true[0]                            ); } else err { dumpln(err); }
try { dumpln( 123[0]                             ); } else err { dumpln(err); }
try { dumpln( "foo"[0]                           ); } else err { dumpln(err); }
try { dumpln( ["foo", "bar"][0]                  ); } else err { dumpln(err); }
try { dumpln( map{"foo": 123, "bar": 456}["foo"] ); } else err { dumpln(err); }
try { dumpln( set{"foo", "bar"}["foo"]           ); } else err { dumpln(err); }
try { dumpln( 123.&[0]                           ); } else err { dumpln(err); }
try { dumpln( function(){}[0]                    ); } else err { dumpln(err); }
try { dumpln( println[0]                         ); } else err { dumpln(err); }

print("\n");

let x = ["foo", "bar", "baz"];
dumpln(x);
x[1] = "xyz";
dumpln(x);
try { dumpln(x[3]); } else err { dumpln(err); }

print("\n");

let x = {"foo": 123, "bar": 456};
dumpln(x);
x["foo"] = "xyz";
dumpln(x);
try { dumpln(x["baz"]); } else err { dumpln(err); }

print("\n");

let meta = {"f": function(self) { println("inside metafunction f"); }};
let x = 123;
setmeta(x.&, meta);
try { dumpln(x["f"]); } else err { dumpln(err); }
################################################################################
# "attempted to access field of type `null` with type `number`"
# "attempted to access field of type `boolean` with type `number`"
# "attempted to access field of type `number` with type `number`"
# "attempted to access field of type `string` with type `number`"
# "foo"
# 123
# "attempted to access field of type `set` with type `string`"
# "attempted to access field of type `reference` with type `number`"
# "attempted to access field of type `function` with type `number`"
# "attempted to access field of type `function` with type `number`"
#
# ["foo", "bar", "baz"]
# ["foo", "xyz", "baz"]
# "invalid vector access with index 3"
#
# {"foo": 123, "bar": 456}
# {"foo": "xyz", "bar": 456}
# "invalid map access with field \"baz\""
#
# "attempted to access field of type `number` with type `string`"
