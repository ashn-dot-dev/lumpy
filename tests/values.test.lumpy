dumpln( null );

print("\n");

dumpln( true  );
dumpln( false );

print("\n");

dumpln( 123    );
dumpln( 123.0  );
dumpln( 123.45 );
dumpln( 0xdeadbeef );

print("\n");

dumpln( "hello"        );
dumpln( "hello world"  );
dumpln( "hello\tworld" );
dumpln( "hello\nworld" );
dumpln( "hello\\world" );
dumpln( "hello\"world" );
dumpln( `hello world`  );
dumpln(
`hello
world`
);
dumpln(
```
hello
world
```
);

print("\n");

dumpln( []                     );
dumpln( ["foo", "bar", "baz"]  );
dumpln( ["foo", "bar", "baz",] );

print("\n");

dumpln( map{}                                    );
dumpln( map{"foo": 123, "bar": 456, "baz": 789}  );
dumpln( map{"foo": 123, "bar": 456, "baz": 789,} );
dumpln( {"foo": 123, "bar": 456, "baz": 789}     );
dumpln( {"foo": 123, "bar": 456, "baz": 789,}    );

print("\n");

dumpln( set{}                     );
dumpln( set{"foo", "bar", "baz"}  );
dumpln( set{"foo", "bar", "baz",} );
dumpln( {"foo", "bar", "baz"}     );
dumpln( {"foo", "bar", "baz",}    );

print("\n");

println( type(123.&)                                  );
println( type({"foo": 123, "bar": 456, "baz": 456}.&) );

print("\n");

let named_function = function() { };
dumpln( named_function                                          );
dumpln( function() { }                                          );
dumpln( function() { println("hello from inside a function"); } );

print("\n");

dumpln( dumpln  );
dumpln( println );
################################################################################
# null
#
# true
# false
#
# 123
# 123
# 123.45
# 3735928559
#
# "hello"
# "hello world"
# "hello\tworld"
# "hello\nworld"
# "hello\\world"
# "hello\"world"
# "hello world"
# "hello\nworld"
# "hello\nworld\n"
#
# []
# ["foo", "bar", "baz"]
# ["foo", "bar", "baz"]
#
# map{}
# {"foo": 123, "bar": 456, "baz": 789}
# {"foo": 123, "bar": 456, "baz": 789}
# {"foo": 123, "bar": 456, "baz": 789}
# {"foo": 123, "bar": 456, "baz": 789}
#
# set{}
# {"foo", "bar", "baz"}
# {"foo", "bar", "baz"}
# {"foo", "bar", "baz"}
# {"foo", "bar", "baz"}
#
# reference
# reference
#
# named_function@[values.test.lumpy, line 64]
# function@[values.test.lumpy, line 66]
# function@[values.test.lumpy, line 67]
#
# dumpln@builtin
# println@builtin
