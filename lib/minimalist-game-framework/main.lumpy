let source =
```
from dataclasses import dataclass
import os

import pygame


_MINGF_COLOR = BASE_ENV.get(String("_MINGF_COLOR"))
_MINGF_RECT = BASE_ENV.get(String("_MINGF_RECT"));
_MINGF_VEC2 = BASE_ENV.get(String("_MINGF_VEC2"));
_MINGF_TARGET_FPS = 60


@dataclass
class MinGFPressState:
    held: bool = False
    pressed: bool = False
    released: bool = False


_MOUSE_LBUTTON = MinGFPressState()
_MOUSE_RBUTTON = MinGFPressState()
_MOUSE_MBUTTON = MinGFPressState()

_PYGAME_MOUSEMAP = {
    1: _MOUSE_LBUTTON,
    3: _MOUSE_RBUTTON,
    2: _MOUSE_MBUTTON,
}

_STRING_MOUSEMAP = {
    "LBUTTON": _MOUSE_LBUTTON, "LEFT": _MOUSE_LBUTTON,
    "RBUTTON": _MOUSE_RBUTTON, "RIGHT": _MOUSE_RBUTTON,
    "MBUTTON": _MOUSE_MBUTTON, "MIDDLE": _MOUSE_MBUTTON,
}

_KEY_UARROW = MinGFPressState()
_KEY_DARROW = MinGFPressState()
_KEY_LARROW = MinGFPressState()
_KEY_RARROW = MinGFPressState()
_KEY_LSHIFT = MinGFPressState()
_KEY_RSHIFT = MinGFPressState()
_KEY_LCTRL = MinGFPressState()
_KEY_RCTRL = MinGFPressState()
_KEY_LALT = MinGFPressState()
_KEY_RALT = MinGFPressState()
_KEY_BACKSPACE = MinGFPressState()
_KEY_SPACE = MinGFPressState()
_KEY_ENTER = MinGFPressState()
_KEY_TAB = MinGFPressState()
_KEY_F1 = MinGFPressState()
_KEY_F2 = MinGFPressState()
_KEY_F3 = MinGFPressState()
_KEY_F4 = MinGFPressState()
_KEY_F5 = MinGFPressState()
_KEY_F6 = MinGFPressState()
_KEY_F7 = MinGFPressState()
_KEY_F8 = MinGFPressState()
_KEY_F9 = MinGFPressState()
_KEY_F10 = MinGFPressState()
_KEY_F11 = MinGFPressState()
_KEY_F12 = MinGFPressState()
_KEY_0 = MinGFPressState()
_KEY_1 = MinGFPressState()
_KEY_2 = MinGFPressState()
_KEY_3 = MinGFPressState()
_KEY_4 = MinGFPressState()
_KEY_5 = MinGFPressState()
_KEY_6 = MinGFPressState()
_KEY_7 = MinGFPressState()
_KEY_8 = MinGFPressState()
_KEY_9 = MinGFPressState()
_KEY_A = MinGFPressState()
_KEY_B = MinGFPressState()
_KEY_C = MinGFPressState()
_KEY_D = MinGFPressState()
_KEY_E = MinGFPressState()
_KEY_F = MinGFPressState()
_KEY_G = MinGFPressState()
_KEY_H = MinGFPressState()
_KEY_I = MinGFPressState()
_KEY_J = MinGFPressState()
_KEY_K = MinGFPressState()
_KEY_L = MinGFPressState()
_KEY_M = MinGFPressState()
_KEY_N = MinGFPressState()
_KEY_O = MinGFPressState()
_KEY_P = MinGFPressState()
_KEY_Q = MinGFPressState()
_KEY_R = MinGFPressState()
_KEY_S = MinGFPressState()
_KEY_T = MinGFPressState()
_KEY_U = MinGFPressState()
_KEY_V = MinGFPressState()
_KEY_W = MinGFPressState()
_KEY_X = MinGFPressState()
_KEY_Y = MinGFPressState()
_KEY_Z = MinGFPressState()

_PYGAME_KEYMAP = {
    pygame.K_UP: _KEY_UARROW,
    pygame.K_DOWN: _KEY_DARROW,
    pygame.K_LEFT: _KEY_LARROW,
    pygame.K_RIGHT: _KEY_RARROW,
    pygame.K_LSHIFT: _KEY_LSHIFT,
    pygame.K_RSHIFT: _KEY_RSHIFT,
    pygame.K_LCTRL: _KEY_LCTRL,
    pygame.K_RCTRL: _KEY_RCTRL,
    pygame.K_LALT: _KEY_LALT,
    pygame.K_RALT: _KEY_RALT,
    pygame.K_BACKSPACE: _KEY_BACKSPACE,
    pygame.K_SPACE: _KEY_SPACE,
    pygame.K_RETURN: _KEY_ENTER,
    pygame.K_TAB: _KEY_TAB,
    pygame.K_F1: _KEY_F1,
    pygame.K_F2: _KEY_F2,
    pygame.K_F3: _KEY_F3,
    pygame.K_F4: _KEY_F4,
    pygame.K_F5: _KEY_F5,
    pygame.K_F6: _KEY_F6,
    pygame.K_F7: _KEY_F7,
    pygame.K_F8: _KEY_F8,
    pygame.K_F9: _KEY_F9,
    pygame.K_F10: _KEY_F10,
    pygame.K_F11: _KEY_F11,
    pygame.K_F12: _KEY_F12,
    pygame.K_0: _KEY_0,
    pygame.K_1: _KEY_1,
    pygame.K_2: _KEY_2,
    pygame.K_3: _KEY_3,
    pygame.K_4: _KEY_4,
    pygame.K_5: _KEY_5,
    pygame.K_6: _KEY_6,
    pygame.K_7: _KEY_7,
    pygame.K_8: _KEY_8,
    pygame.K_9: _KEY_9,
    pygame.K_a: _KEY_A,
    pygame.K_b: _KEY_B,
    pygame.K_c: _KEY_C,
    pygame.K_d: _KEY_D,
    pygame.K_e: _KEY_E,
    pygame.K_f: _KEY_F,
    pygame.K_g: _KEY_G,
    pygame.K_h: _KEY_H,
    pygame.K_i: _KEY_I,
    pygame.K_j: _KEY_J,
    pygame.K_k: _KEY_K,
    pygame.K_l: _KEY_L,
    pygame.K_m: _KEY_M,
    pygame.K_n: _KEY_N,
    pygame.K_o: _KEY_O,
    pygame.K_p: _KEY_P,
    pygame.K_q: _KEY_Q,
    pygame.K_r: _KEY_R,
    pygame.K_s: _KEY_S,
    pygame.K_t: _KEY_T,
    pygame.K_u: _KEY_U,
    pygame.K_v: _KEY_V,
    pygame.K_w: _KEY_W,
    pygame.K_x: _KEY_X,
    pygame.K_y: _KEY_Y,
    pygame.K_z: _KEY_Z,
}

_STRING_KEYMAP = {
    "UARROW": _KEY_UARROW, "UP": _KEY_UARROW,
    "DARROW": _KEY_DARROW, "DOWN": _KEY_DARROW,
    "LARROW": _KEY_LARROW, "LEFT": _KEY_LARROW,
    "RARROW": _KEY_RARROW, "RIGHT": _KEY_RARROW,
    "LSHIFT": _KEY_LSHIFT,
    "RSHIFT": _KEY_RSHIFT,
    "LCTRL": _KEY_LCTRL,
    "RCTRL": _KEY_RCTRL,
    "LALT": _KEY_LALT,
    "RALT": _KEY_RALT,
    "BACKSPACE": _KEY_BACKSPACE,
    "SPACE": _KEY_SPACE,
    "ENTER": _KEY_ENTER, "RETURN": _KEY_ENTER,
    "TAB": _KEY_TAB,
    "F1": _KEY_F1,
    "F2": _KEY_F2,
    "F3": _KEY_F3,
    "F4": _KEY_F4,
    "F5": _KEY_F5,
    "F6": _KEY_F6,
    "F7": _KEY_F7,
    "F8": _KEY_F8,
    "F9": _KEY_F9,
    "F10": _KEY_F10,
    "F11": _KEY_F11,
    "F12": _KEY_F12,
    "0": _KEY_0,
    "1": _KEY_1,
    "2": _KEY_2,
    "3": _KEY_3,
    "4": _KEY_4,
    "5": _KEY_5,
    "6": _KEY_6,
    "7": _KEY_7,
    "8": _KEY_8,
    "9": _KEY_9,
    "A": _KEY_A,
    "B": _KEY_B,
    "C": _KEY_C,
    "D": _KEY_D,
    "E": _KEY_E,
    "F": _KEY_F,
    "G": _KEY_G,
    "H": _KEY_H,
    "I": _KEY_I,
    "J": _KEY_J,
    "K": _KEY_K,
    "L": _KEY_L,
    "M": _KEY_M,
    "N": _KEY_N,
    "O": _KEY_O,
    "P": _KEY_P,
    "Q": _KEY_Q,
    "R": _KEY_R,
    "S": _KEY_S,
    "T": _KEY_T,
    "U": _KEY_U,
    "V": _KEY_V,
    "W": _KEY_W,
    "X": _KEY_X,
    "Y": _KEY_Y,
    "Z": _KEY_Z,
}

_running = False
_screen = None
_clock = None


class BuiltinMinGFInit(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::init")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 3)
        w = Builtin.typed_argument(arguments, 0, Number)
        h = Builtin.typed_argument(arguments, 1, Number)
        title = Builtin.typed_argument(arguments, 2, String)

        pygame.init()

        pygame.display.set_caption(title.data)

        global _running, _screen, _clock
        _running = True
        _screen = pygame.display.set_mode((int(w), int(h)))
        _clock = pygame.time.Clock()
        return Null()


class BuiltinMinGFFini(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::fini")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 0)

        global _running
        _running = False
        pygame.quit()
        return Null()


class BuiltinMinGFTick(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::tick")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 0)

        # End of the Current Frame
        pygame.display.flip()
        _clock.tick(_MINGF_TARGET_FPS)

        # Start of the Following Frame
        _screen.fill((0x00, 0x00, 0x00))
        for key in _PYGAME_KEYMAP.values():
            key.pressed = False
            key.released = False
        for button in _PYGAME_MOUSEMAP.values():
            button.pressed = False
            button.released = False
        for event in pygame.event.get():
            global _running
            if event.type == pygame.QUIT:
                _running = False
            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                _running = False
            if event.type == pygame.KEYDOWN and event.key in _PYGAME_KEYMAP:
                _PYGAME_KEYMAP[event.key].held = True
                _PYGAME_KEYMAP[event.key].pressed = True
            if event.type == pygame.KEYUP and event.key in _PYGAME_KEYMAP:
                _PYGAME_KEYMAP[event.key].held = False
                _PYGAME_KEYMAP[event.key].released = True
            if event.type == pygame.MOUSEBUTTONDOWN and event.button in _PYGAME_MOUSEMAP:
                _PYGAME_MOUSEMAP[event.button].held = True
                _PYGAME_MOUSEMAP[event.button].pressed = True
            if event.type == pygame.MOUSEBUTTONUP and event.button in _PYGAME_MOUSEMAP:
                _PYGAME_MOUSEMAP[event.button].held = False
                _PYGAME_MOUSEMAP[event.button].released = True

        return Null()


class BuiltinMinGFRunning(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::running")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 0)
        return Boolean.new(_running)


class BuiltinMinGFFps(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::fps")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 0)
        return Number.new(_clock.get_fps())


class BuiltinMinGFImageLoad(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::image::load")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        path = Builtin.typed_argument(arguments, 0, String).data
        image = pygame.image.load(path).convert_alpha()
        return External(image, _MINGF_IMAGE_META.copy())


class BuiltinMinGFImageW(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::image::w")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        ref, ext = Builtin.typed_argument_reference(arguments, 0, External)
        assert isinstance(ext.data, pygame.Surface), "expected image"
        image = ext.data
        return Number.new(image.get_width())


class BuiltinMinGFImageH(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::image::h")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        ref, ext = Builtin.typed_argument_reference(arguments, 0, External)
        assert isinstance(ext.data, pygame.Surface), "expected image"
        image = ext.data
        return Number.new(image.get_height())


class BuiltinMinGFFontLoad(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::font::load")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 2)
        path = Builtin.typed_argument(arguments, 0, String).data
        size = Builtin.typed_argument(arguments, 1, Number).data
        font = pygame.font.Font(path, size=int(size))
        return External(font, _MINGF_FONT_META.copy())


class BuiltinMinGFFontMeasure(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::font::measure")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 2)
        ref, ext = Builtin.typed_argument_reference(arguments, 0, External)
        assert isinstance(ext.data, pygame.Font), "expected font"
        font = ext.data
        text = Builtin.typed_argument(arguments, 1, String).data
        size = font.size(text)
        return Map({
            String("x"): Number.new(size[0]),
            String("y"): Number.new(size[1]),
        }, _MINGF_VEC2.copy())


class BuiltinMinGFSoundLoad(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::sound::load")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        path = Builtin.typed_argument(arguments, 0, String).data
        sound = pygame.mixer.Sound(path)
        return External(sound)


class BuiltinMinGFSoundPlay(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::sound::play")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 2)
        ext = Builtin.typed_argument(arguments, 0, External)
        assert isinstance(ext.data, pygame.mixer.Sound), "expected sound"
        sound = ext.data
        volume = float(Builtin.typed_argument(arguments, 1, Number).data)
        if volume < 0.0:
            volume = 0.0
        if volume > 1.0:
            volume = 1.0

        channel = sound.play()
        if channel is not None:
            channel.set_volume(volume)
        return Null()


class BuiltinMinGFSoundPlayEx(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::sound::play_ex")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 3)
        ext = Builtin.typed_argument(arguments, 0, External)
        assert isinstance(ext.data, pygame.mixer.Sound), "expected sound"
        sound = ext.data
        volume = float(Builtin.typed_argument(arguments, 1, Number).data)
        if volume < 0.0:
            volume = 0.0
        if volume > 1.0:
            volume = 1.0
        extras = Builtin.typed_argument(arguments, 2, Map)

        loop = False
        for k, v in extras.data.items():
            if isinstance(k, String) and k.data == "loop":
                assert isinstance(v, Boolean), "expected loop to be a boolean"
                loop = v.data
                continue

            raise Exception(f"unexpected extras key {k}")

        channel = sound.play(loops=-1 if loop else 0)
        if channel is not None:
            channel.set_volume(volume)
        return Null()


class BuiltinMinGFMousePosition(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::mouse::position")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 0)
        position = pygame.mouse.get_pos()
        return Map({
            String("x"): Number.new(position[0]),
            String("y"): Number.new(position[1]),
        }, _MINGF_VEC2.copy())


class BuiltinMinGFMouseHeld(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::mouse::held")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_MOUSEMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_MOUSEMAP[key].held)


class BuiltinMinGFMousePressed(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::mouse::pressed")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_MOUSEMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_MOUSEMAP[key].pressed)


class BuiltinMinGFMouseReleased(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::mouse::released")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_MOUSEMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_MOUSEMAP[key].released)


class BuiltinMinGFKeyHeld(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::key::held")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_KEYMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_KEYMAP[key].held)


class BuiltinMinGFKeyPressed(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::key::pressed")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_KEYMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_KEYMAP[key].pressed)


class BuiltinMinGFKeyReleased(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::key::released")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 1)
        key = Builtin.typed_argument(arguments, 0, String).data.upper()
        if not key in _STRING_KEYMAP:
            return Boolean.new(False)
        return Boolean.new(_STRING_KEYMAP[key].released)


class BuiltinMinGFDrawRectEmpty(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::draw::rect_empty")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 3)
        rect = Builtin.typed_argument(arguments, 0, Map)
        color = Builtin.typed_argument(arguments, 1, Map)
        thickness = Builtin.typed_argument(arguments, 2, Number)
        pygame.draw.rect(
            _screen,
            pygame.Color(
                int(color[String("r")]),
                int(color[String("g")]),
                int(color[String("b")]),
                int(color[String("a")]),
            ),
            pygame.Rect(
                float(rect[String("x")]),
                float(rect[String("y")]),
                float(rect[String("w")]),
                float(rect[String("h")]),
            ),
            width = int(thickness)
        )
        return Null()


class BuiltinMinGFDrawRectSolid(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::draw::rect_solid")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 2)
        rect = Builtin.typed_argument(arguments, 0, Map)
        color = Builtin.typed_argument(arguments, 1, Map)
        pygame.draw.rect(
            _screen,
            pygame.Color(
                int(color[String("r")]),
                int(color[String("g")]),
                int(color[String("b")]),
                int(color[String("a")]),
            ),
            pygame.Rect(
                float(rect[String("x")]),
                float(rect[String("y")]),
                float(rect[String("w")]),
                float(rect[String("h")]),
            ),
        )
        return Null()


class BuiltinMinGFDrawImage(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::draw::image")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 2)
        ext = Builtin.typed_argument(arguments, 0, External)
        assert isinstance(ext.data, pygame.Surface), "expected image"
        image = ext.data
        vec2 = Builtin.typed_argument(arguments, 1, Map)
        position = pygame.Vector2(
            float(vec2[String("x")]),
            float(vec2[String("y")]),
        )

        _screen.blit(image, position)
        return Null()


class BuiltinMinGFDrawImageEx(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::draw::image_ex")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 3)
        ext = Builtin.typed_argument(arguments, 0, External)
        assert isinstance(ext.data, pygame.Surface), "expected image"
        image = ext.data
        vec2 = Builtin.typed_argument(arguments, 1, Map)
        position = pygame.Vector2(
            float(vec2[String("x")]),
            float(vec2[String("y")]),
        )
        extras = Builtin.typed_argument(arguments, 2, Map)

        rect = image.get_frect()
        rect.x = position.x
        rect.y = position.y

        flip_x = False
        flip_y = False
        scale_x = 1.0
        scale_y = 1.0
        angle = 0.0
        for k, v in extras.data.items():
            if isinstance(k, String) and k.data == "flip-x":
                assert isinstance(v, Boolean), "expected flip-x to be a boolean"
                flip_x = v.data
                continue

            if isinstance(k, String) and k.data == "flip-y":
                assert isinstance(v, Boolean), "expected flip-y to be a boolean"
                flip_y = v.data
                continue

            if isinstance(k, String) and k.data == "scale":
                # X and Y scaling factors applied before rotation.
                if isinstance(v, Number):
                    scale_x = float(v)
                    scale_y = float(v)
                else:
                    assert isinstance(v[String("x")], Number), "expected scale::x to be a number"
                    assert isinstance(v[String("y")], Number), "expected scale::y to be a number"
                    scale_x = float(v[String("x")])
                    scale_y = float(v[String("y")])
                continue

            if isinstance(k, String) and k.data == "angle":
                # Angle of rotation around the cetner of the image.
                assert isinstance(v, Number), "expected angle to be a number"
                angle = float(extras[String("angle")])
                continue

            raise Exception(f"unexpected extras key {k}")

        if flip_x or flip_y:
            image = pygame.transform.flip(image, flip_x=flip_x, flip_y=flip_y)
        if scale_x != 1.0 or scale_y != 1.0:
            resized_x = max(0.0, scale_x * image.get_width())
            resized_y = max(0.0, scale_y * image.get_height())
            image = pygame.transform.scale(image, size=(resized_x, resized_y))
            rect = image.get_frect(topleft=rect.topleft)
        if angle != 0.0:
            image = pygame.transform.rotate(image, angle=angle)
            rect = image.get_frect(center=rect.center)

        _screen.blit(image, rect)
        return Null()


class BuiltinMinGFDrawText(Builtin):
    @staticmethod
    def name():
        return String("minimalist-game-framework::draw::text")

    def function(self, arguments):
        Builtin.expect_argument_count(arguments, 4)
        ext = Builtin.typed_argument(arguments, 0, External)
        assert isinstance(ext.data, pygame.Font), "expected font"
        font = ext.data
        vec2 = Builtin.typed_argument(arguments, 1, Map)
        color = Builtin.typed_argument(arguments, 2, Map)
        text = Builtin.typed_argument(arguments, 3, String).data
        text = font.render(
            text,
            antialias=True,
            color=pygame.Color(
                int(color[String("r")]),
                int(color[String("g")]),
                int(color[String("b")]),
                int(color[String("a")]),
            )
        )
        _screen.blit(
            text,
            (float(vec2[String("x")]), float(vec2[String("y")]))
        )
        return Null()


_MINGF_IMAGE_META = Map.new({
    String("w"): BuiltinMinGFImageW(),
    String("h"): BuiltinMinGFImageH(),
})
_MINGF_FONT_META = Map.new({
    String("measure"): BuiltinMinGFFontMeasure(),
})
_MINGF = Map.new({
    String("color"): _MINGF_COLOR.copy(),
    String("vec2"): _MINGF_VEC2.copy(),
    String("rect"): _MINGF_RECT.copy(),
    String("init"): BuiltinMinGFInit(),
    String("fini"): BuiltinMinGFFini(),
    String("tick"): BuiltinMinGFTick(),
    String("running"): BuiltinMinGFRunning(),
    String("fps"): BuiltinMinGFFps(),
    String("image"): Map.new({
        String("load"): BuiltinMinGFImageLoad(),
    }),
    String("font"): Map.new({
        String("load"): BuiltinMinGFFontLoad(),
    }),
    String("sound"): Map.new({
        String("load"): BuiltinMinGFSoundLoad(),
        String("play"): BuiltinMinGFSoundPlay(),
        String("play_ex"): BuiltinMinGFSoundPlayEx(),
    }),
    String("mouse"): Map.new({
        String("position"): BuiltinMinGFMousePosition(),
        String("held"): BuiltinMinGFMouseHeld(),
        String("pressed"): BuiltinMinGFMousePressed(),
        String("released"): BuiltinMinGFMouseReleased(),
    }),
    String("key"): Map.new({
        String("held"): BuiltinMinGFKeyHeld(),
        String("pressed"): BuiltinMinGFKeyPressed(),
        String("released"): BuiltinMinGFKeyReleased(),
    }),
    String("draw"): Map.new({
        String("rect_empty"): BuiltinMinGFDrawRectEmpty(),
        String("rect_solid"): BuiltinMinGFDrawRectSolid(),
        String("image"): BuiltinMinGFDrawImage(),
        String("image_ex"): BuiltinMinGFDrawImageEx(),
        String("text"): BuiltinMinGFDrawText(),
    }),
})
BASE_ENV.let(String("_MINGF"), _MINGF)
```;

extend(`BASE_ENV.let(String("_MINGF_COLOR"), Null())`);
extend(`BASE_ENV.let(String("_MINGF_RECT"), Null())`);
extend(`BASE_ENV.let(String("_MINGF_VEC2"), Null())`);
_MINGF_COLOR = import("color.lumpy");
_MINGF_RECT = import("rect.lumpy");
_MINGF_VEC2 = import("vec2.lumpy");
extend(source);

return _MINGF;
